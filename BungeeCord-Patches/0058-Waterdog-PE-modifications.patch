From 91204b7e90a3962c7e407cb4a642bee315fb207a Mon Sep 17 00:00:00 2001
From: Colin Godsey <crgodsey@gmail.com>
Date: Tue, 16 Apr 2019 07:50:25 -0600
Subject: [PATCH] Waterdog PE (modifications)


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index d44ac67e..4025bae0 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -221,7 +221,13 @@ public abstract class ProxyServer
      * @param restricted whether the server info restricted property will be set
      * @return the constructed instance
      */
-    public abstract ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted);
+    // Waterdog start
+    public abstract ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted, boolean isRakNet, String transferGroup);
+
+    public ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted) {
+        return constructServerInfo(name, address, motd, restricted, false, "default");
+    }
+    // Waterdog end
 
     /**
      * Returns the console overlord for this proxy. Being the console, this
diff --git a/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java b/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
index 42b84063..3374ae40 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ListenerInfo.java
@@ -71,13 +71,26 @@ public class ListenerInfo
      * Whether to support HAProxy PROXY protocol.
      */
     private final boolean proxyProtocol;
+    // Waterdog start
+    /**
+     * Whether this listener is a PE listener.
+     */
+    private final boolean rakNet;
+    // Waterdog end
 
     @Deprecated
     public ListenerInfo(InetSocketAddress host, String motd, int maxPlayers, int tabListSize, List<String> serverPriority, boolean forceDefault, Map<String, String> forcedHosts, String tabListType, boolean setLocalAddress, boolean pingPassthrough, int queryPort, boolean queryEnabled)
     {
-        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false );
+        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, false, false); // Waterdog
     }
 
+    // Waterdog start
+    public ListenerInfo(InetSocketAddress host, String motd, int maxPlayers, int tabListSize, List<String> serverPriority, boolean forceDefault, Map<String, String> forcedHosts, String tabListType, boolean setLocalAddress, boolean pingPassthrough, int queryPort, boolean queryEnabled, boolean proxyProtocol)
+    {
+        this( host, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forcedHosts, tabListType, setLocalAddress, pingPassthrough, queryPort, queryEnabled, proxyProtocol, false );
+    }
+    // Waterdog end
+
     /**
      * Gets the highest priority server to join.
      *
@@ -102,4 +115,10 @@ public class ListenerInfo
     {
         return ( serverPriority.size() > 1 ) ? serverPriority.get( 1 ) : getDefaultServer();
     }
+
+    // Waterdog start
+    public boolean needsRealQuery() {
+        return queryEnabled && (!rakNet || queryPort != host.getPort());
+    }
+    // Waterdog end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java b/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
index 19773843..30e41bd7 100644
--- a/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
+++ b/api/src/main/java/net/md_5/bungee/api/config/ServerInfo.java
@@ -104,4 +104,11 @@ public interface ServerInfo
      * @param callback the callback to call when the count has been retrieved.
      */
     void ping(Callback<ServerPing> callback);
+
+    // Waterdog start
+    /**
+     * Whether this server should use the RakNet UDP protocol.
+     */
+    boolean isRakNet();
+    // Waterdog end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index f7459860..4f13a7a3 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -254,6 +254,15 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     UUID getUniqueId();
 
+    // Waterdog start
+    /**
+     * Get the player's Xbox User ID (XUID) for Bedrock players.
+     *
+     * @return XUID as a BigInteger, or null if not present.
+     */
+    java.math.BigInteger getXUID();
+    // Waterdog end
+
     /**
      * Gets this player's locale.
      *
diff --git a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
index 0d1f801a..831505f0 100644
--- a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
+++ b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
@@ -70,6 +70,12 @@ public class ServerConnectRequestTest
         public void ping(Callback<ServerPing> callback)
         {
         }
+
+        // Waterdog start
+        public boolean isRakNet() {
+            return true;
+        }
+        // Waterdog end
     };
 
     @Test
diff --git a/native/src/main/c/NativeCompressImpl.cpp b/native/src/main/c/NativeCompressImpl.cpp
index 9bda6300..36d67513 100644
--- a/native/src/main/c/NativeCompressImpl.cpp
+++ b/native/src/main/c/NativeCompressImpl.cpp
@@ -80,3 +80,31 @@ jint JNICALL Java_net_md_15_bungee_jni_zlib_NativeCompressImpl_process(JNIEnv* e
 
     return outLength - stream->avail_out;
 }
+
+// Waterdog start
+jint JNICALL Java_net_md_15_bungee_jni_zlib_NativeCompressImpl_processEx(JNIEnv* env, jobject obj, jlong ctx, jlong in, jint inLength, jlong out, jint outLength, jboolean compress) {
+    z_stream* stream = (z_stream*) ctx;
+
+    stream->avail_in = inLength;
+    stream->next_in = (byte*) in;
+
+    stream->avail_out = outLength;
+    stream->next_out = (byte*) out;
+
+    int ret = (compress) ? deflate(stream, !inLength ? Z_FINISH : Z_NO_FLUSH) : inflate(stream, Z_PARTIAL_FLUSH);
+
+    switch (ret) {
+        case Z_STREAM_END:
+            env->SetBooleanField(obj, finishedID, true);
+            break;
+        case Z_OK:
+            break;
+        default:
+            throwException(env, "Unknown z_stream return code", ret);
+    }
+
+    env->SetIntField(obj, consumedID, inLength - stream->avail_in);
+
+    return outLength - stream->avail_out;
+}
+// Waterdog end
\ No newline at end of file
diff --git a/native/src/main/c/net_md_5_bungee_jni_zlib_NativeCompressImpl.h b/native/src/main/c/net_md_5_bungee_jni_zlib_NativeCompressImpl.h
index befb7dcc..f7bb4cd1 100644
--- a/native/src/main/c/net_md_5_bungee_jni_zlib_NativeCompressImpl.h
+++ b/native/src/main/c/net_md_5_bungee_jni_zlib_NativeCompressImpl.h
@@ -47,6 +47,16 @@ JNIEXPORT jlong JNICALL Java_net_md_15_bungee_jni_zlib_NativeCompressImpl_init
 JNIEXPORT jint JNICALL Java_net_md_15_bungee_jni_zlib_NativeCompressImpl_process
   (JNIEnv *, jobject, jlong, jlong, jint, jlong, jint, jboolean);
 
+// Waterdog start
+/*
+ * Class:     net_md_5_bungee_jni_zlib_NativeCompressImpl
+ * Method:    process
+ * Signature: (JJIJIZ)I
+ */
+JNIEXPORT jint JNICALL Java_net_md_15_bungee_jni_zlib_NativeCompressImpl_processEx
+  (JNIEnv *, jobject, jlong, jlong, jint, jlong, jint, jboolean);
+// Waterdog end
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
index d211cef6..161aa2aa 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
@@ -34,7 +34,7 @@ public class JavaCipher implements BungeeCipher
     public void init(boolean forEncryption, SecretKey key) throws GeneralSecurityException
     {
         int mode = forEncryption ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;
-        cipher.init( mode, key, new IvParameterSpec( key.getEncoded() ) );
+        cipher.init( mode, key, new IvParameterSpec( java.util.Arrays.copyOf(key.getEncoded(), 16) ) ); // Waterdog
     }
 
     @Override
diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java
index 7797a46b..d2865815 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java
@@ -18,7 +18,7 @@ public class NativeCipher implements BungeeCipher
     @Override
     public void init(boolean forEncryption, SecretKey key) throws GeneralSecurityException
     {
-        Preconditions.checkArgument( key.getEncoded().length == 16, "Invalid key size" );
+        Preconditions.checkArgument( key.getEncoded().length == 16 || key.getEncoded().length == 32, "Invalid key size" ); // Waterdog
         free();
 
         this.ctx = nativeCipher.init( forEncryption, key.getEncoded() );
@@ -62,6 +62,12 @@ public class NativeCipher implements BungeeCipher
         out.writerIndex( out.writerIndex() + length );
     }
 
+    // Waterdog start
+    public void cipherUnsafe(long addr, int length) {
+        nativeCipher.cipher(ctx, addr, addr, length);
+    }
+    // Waterdog end
+
     @Override
     public ByteBuf cipher(ChannelHandlerContext ctx, ByteBuf in) throws GeneralSecurityException
     {
diff --git a/native/src/main/java/net/md_5/bungee/jni/zlib/NativeCompressImpl.java b/native/src/main/java/net/md_5/bungee/jni/zlib/NativeCompressImpl.java
index 3bcc6ddb..e4307a7d 100644
--- a/native/src/main/java/net/md_5/bungee/jni/zlib/NativeCompressImpl.java
+++ b/native/src/main/java/net/md_5/bungee/jni/zlib/NativeCompressImpl.java
@@ -20,4 +20,5 @@ public class NativeCompressImpl
     native long init(boolean compress, int compressionLevel);
 
     native int process(long ctx, long in, int inLength, long out, int outLength, boolean compress);
+    native int processEx(long ctx, long in, int inLength, long out, int outLength, boolean compress); // Waterdog
 }
diff --git a/native/src/main/java/net/md_5/bungee/jni/zlib/NativeZlib.java b/native/src/main/java/net/md_5/bungee/jni/zlib/NativeZlib.java
index f1f3b1e3..e0e11d5c 100644
--- a/native/src/main/java/net/md_5/bungee/jni/zlib/NativeZlib.java
+++ b/native/src/main/java/net/md_5/bungee/jni/zlib/NativeZlib.java
@@ -11,6 +11,7 @@ public class NativeZlib implements BungeeZlib
     @Getter
     private final NativeCompressImpl nativeCompress = new NativeCompressImpl();
     /*============================================================================*/
+    @Getter // Waterdog
     private boolean compress;
     private long ctx;
 
@@ -36,6 +37,26 @@ public class NativeZlib implements BungeeZlib
         nativeCompress.finished = false;
     }
 
+    // Waterdog start
+    public int processEx(long in, int inLength, long out, int outLength) {
+        return nativeCompress.processEx( ctx, in, inLength, out, outLength, compress );
+    }
+
+    public int getConsumed() {
+        return nativeCompress.consumed;
+    }
+
+    public boolean getFinished() {
+        return nativeCompress.finished;
+    }
+
+    public void doReset() {
+        nativeCompress.reset( ctx, compress );
+        nativeCompress.consumed = 0;
+        nativeCompress.finished = false;
+    }
+    // Waterdog end
+
     @Override
     public void process(ByteBuf in, ByteBuf out) throws DataFormatException
     {
diff --git a/native/src/main/resources/native-compress.so b/native/src/main/resources/native-compress.so
index e83e4d2d9693c3a19cf40edb0dd4fe9fcf225b91..2d9f3be470fba97225f3bd7944dd145ea8fb6667 100755
GIT binary patch
literal 13352
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
Fe*g+MKz{%L

literal 80333
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
O<meXO9$4vpYyKOlg<|Fa

diff --git a/native/src/main/resources/osx-native-compress.so b/native/src/main/resources/osx-native-compress.so
index 02c98d2c48097fdc3312534ee706b3905283eb45..4879294b67614c2fd661be9009493dfd04a736f9 100755
GIT binary patch
delta 1854
zcmZ`(eP~-%6u&ol`RK>XYge<i_9LlHEl%v06y1cjPZxP%DRy>FVck}y)G<U_+l`92
zykR2Vb-|QdWlpCXh+6;Hv=Ox8x=6dsx`7q{7&u`Owi#D(9fc~h?0N1-YYlqHx##}Q
zIrp63xi8!co8Jj1?!ZGM-hnly3vr1$g*9CxM_Y>(k3bI#gOrh9+lme8JRqG0-GJMQ
z)6#ohdefBPHt(n=;4{+8u#JA|D5s`fNiN~fu&u&L$L)t&zJLrHXesDyHA3sazF&jT
z5I759-wDdZE|u}kr~Qf#x6={D=eJGRe|z+&*0Ce6o;tI!`$bm(;zgiH&F4xpN+(9N
z$<bg_n(1yweQ^r9u#9_T=4|qW;|8V~x3<M@#JvsB!HBC(V64PEurP?@tQ*WQi&lte
z6*J^=m@Ka3j6u$Jedms;-rnAN%@<`H5N*#ZtAukcm*9S_&c+a#7IhW?Lze|7-JkcN
z?J*bi<!_9Xu&Tp(#zP%{?#nX{PR~Mx9aGtP1)<eNpD@T({YibBzO~CBe;MRrbViG^
ze%ULKsgratwx~r-aPVF&uQ@nb-u|3ue~h`}DmQG5+g8GjRfLxLwY=@1?-f+yZ|UiR
zJ0sZxD|Ppo+x2dJr@o8N`Ol!MIEBbXpcN)obY{?%ErX+Tj%=f-0AB6^hJyow-6TZd
zDp#}nfw|%;H^8n$&|Agsy29BZU>DrG75*9_7&>}Ii@wE%j(ZP7fr&oYhshtC$nESS
zkfM`w!I(9;M|8ajp5?CclQ>0JZrGh%V|T(zpA|=1SyL}H3*GpBN(uwj3sB=r*(G}(
z{wbn`7VEVvYwm*Pqu&+QMh4slDcD3_@`uUhQuF0fq($EZW^8Q6AZzf0)A}n*SVV#`
z802G!hK7SMOv?f!gvkxKAcF)`9o*@4GX8Ou8HgDqtqZo0@{K&##bfjZwY<50$+AMj
z9WvG0vS;prNf?dypM{N1ME}@cU~UY1oeG^)%WXf~=_R$%CI)H!k3o(>jiyETnC;qV
z`s-^pHV<A^k54M*q3hMBn|`_V|2zoP%H?r}o>nXHQTn6WL<64ncU!d;a2Zx@6<_^)
zy$e>jgm~oyYushkjwQQ2Jy>Ng+k+5c>Yy`P9WJ6bwK_VF-H(4HAFXj|pOSXBw9iSq
zU)ryvHKjcy?WnZxdXoJ`uWL}-HST`{M@$Xgs|;I?uVK3qSQ1`X%yl?8gic~RN|iC%
z2$@<>0)K*2pz}CoLv=7t6*f^HJSR-H0run})W@DIkY^<xl9)}e!Q>gpVX^@<!W;>B
z|CscHGQ9lKpIXN3bp^Q&%HpX)4pANK8TQM9JrZZ&KA9W@3_tjD386Xo1B@d7N;oMJ
zU={Lt4xY-v-{;`V0<Sc@niKy$2j9XCoFTY{xZ#dOj=*aLUMZMQ@2k02T`Pj^>{_@d
YdAOz$)8_*&1wPp>s#P~9#{yOOZ}btlTL1t6

delta 1604
zcmZ8hUu;uV7{90OUAwOBU5VWv$<~drOj*LFNr{_@+a+Ccrv(d4G{NB#6+vUNh2aB<
zw1n1htc|Tl5+Zwn_&-JqHF1*2(A9wfvBrmmC;OnJu!qeTScL5QJNKN{rC<A<-}%1t
zo$ued=gdT|Ka+WgoXiFeZz#DGi+WXoC0F*Nr~DqDkhTj@JlWer{-{(QlgcO?AVdBe
zQhQBmZ!k)R0yCNrUy)ia+t^ukBa7P|`3K}%V!N)g3-)(IIat`hE#Rx2iqZspuS-#e
zp=`iB3g%>&TnDUYQ;r~cgk>GU{<+@oW|U6`$IgG<d~5av$8V2gy#q|ZiqCB^pY#2S
z{U^eTjwo@kPPNZQ{$;z>t^Qd=ZN%cEV2)SwS#_D@b83{ZxKrEZG}3`Zw8uz$ZvxEB
z3Q{wu`l=I<vSYO%Ru?$XKO^*R)n*hn`}F<e^9QzS!33Nu%7F|kIa}M{HFSczi}sJw
zg79-j_&KApCf8@SWtGjj24i`yOw}7t?pQriZyYZa;bVNhd>RF<clw+`|JI+^_v&MN
z40_+7i-}*RW91C2bh?ndJRP$_ga#Z|j#ktwBI-`AN_#Ef*{_)y7dj@hvZq54w$t5C
z{$OvqAC8s#Djts<->1K*@7G@%pVxwMUfH@7M(JWT3upOvG;B#NmjOs7LQP9ElDs>8
zSY-7UoT78<vr2JQ+H1l8S$QgHr9<cJ>{)jkX+&BhhdgjSN*6{Fe`$%+NCk%yhJ)`X
zF^|xDVY*hnkD7FP1+6$Jf_`ZoqX;SwV2-QOUJH28Ta{M)EVkUUA!dLLyXx$#<uDs;
z*u3d0Y`G}IloOR0TJkm1G?#wWf?<Wl8oIY_cNx?jrbjy>^y!xP+bxQgIECCUq4&J<
zGXGw6S~#&v#KK4tm3+ZAd0&2P=z(dDrgor?WrHr5yACdGy98@%8wJX3$u|(uNCjqX
zY|^vQ#%wI@>2J-L-F3*&>~>kB+ZuVdn8UXPS2vPwJI_P!F}u&^$9xmS%U^^i;Fhz8
z{iyX2h27SAcIV_pzbJ7+;_DKpB_5Mlka$w!2NGu_e(K9lHNLO072>?maf*zU{J5i+
zH(-bdFyxvrl$tRVTak%HCI3W*<gDKc@4y`l?If-g>&1F2>hfVe$*(bJ3;U<DIo8jg
z5zqiw!;X@arz*010>6=R(Sr%-4w&1=@rZEh!ko*)GFljO{PCFy+FK(Z5^}6+FeMZi
z1s$!C->H#5tdY+Nx$5upnst7V;xGLFU<rNVDdehaH3m0@Ty@9`YhZd;uNRYHUUo&(
SlmED@jpWxhw-Y=^p#K1a)M)bn

diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index e4f14974..0129ae39 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -185,4 +185,42 @@ public abstract class AbstractPacketHandler
     {
     }
     // Waterfall end
+
+    // Waterdog start
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePack resourcePack) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEResourceStack resourceStock) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PECommand command) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionRequest encryptionRequest) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionResponse encryptionResponse) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackResponse resourcePackResponse) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket setDisplayObjectivePacket) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PERemoveObjectivePacket removeObjectivePacket) throws Exception
+    {
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest resourcePackChunkRequest) throws Exception
+    {
+    }
+    // Waterdog end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index 9951c1f9..dc63f0a6 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -10,6 +10,47 @@ import lombok.RequiredArgsConstructor;
 @RequiredArgsConstructor
 public abstract class DefinedPacket
 {
+    // Waterdog start
+    public static void writeVarLong(long varlong, ByteBuf to) {
+        while ((varlong & 0xFFFFFFFFFFFFFF80L) != 0x0L) {
+            to.writeByte((int) (varlong & 0x7FL) | 0x80);
+            varlong >>>= 7;
+        }
+        to.writeByte((int) varlong);
+    }
+
+    public static long readVarLong(ByteBuf from) {
+        long varlong = 0L;
+        int length = 0;
+        byte part;
+        do {
+            part = from.readByte();
+            varlong |= (part & 0x7F) << (length++ * 7);
+            if (length > 10) {
+                throw new RuntimeException("VarLong too big");
+            }
+        } while ((part & 0x80) == 0x80);
+        return varlong;
+    }
+
+    public static long readSVarLong(ByteBuf from) {
+        long varlong = readVarLong(from);
+        return (varlong >> 1) ^ -(varlong & 1);
+    }
+
+    public static void writeSVarLong(long varlong, ByteBuf to) {
+        writeVarLong((varlong << 1) ^ (varlong >> 63), to);
+    }
+
+    public static int readSVarInt(ByteBuf from) {
+        int varint = readVarInt(from);
+        return (varint >> 1) ^ -(varint & 1);
+    }
+
+    public static void writeSVarInt(int varint, ByteBuf to) {
+        writeVarInt((varint << 1) ^ (varint >> 31), to);
+    }
+    // Waterdog end
 
     public static void writeString(String s, ByteBuf buf)
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index a46bbc78..ca6e6071 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -35,10 +35,22 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
     }
 
     @Override
-    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception
-    {
-        Protocol.DirectionData prot = ( server ) ? protocol.TO_SERVER : protocol.TO_CLIENT;
-        ByteBuf slice = in.copy(); // Can't slice this one due to EntityMap :(
+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {
+        Protocol.DirectionData prot = (server) ? protocol.TO_SERVER : protocol.TO_CLIENT;
+        // Waterdog start - replace in.copy()
+        //ByteBuf slice = in.copy(); // Can't slice this one due to EntityMap :(
+        /* Modification due to a misunderstanding of the primary (md_5) or secondary (yesdog) author... not sure.
+        But lets make sure we have 16 bytes of *head* room for rewriting, plus 16 tail. */
+        //TODO: lets figure out some way to make this not suck so much. maybe only resize/copy if the size really needs to change
+        ByteBuf slice = ctx.alloc().ioBuffer(in.readableBytes() + 32);
+        slice.writerIndex(slice.writerIndex() + 16);
+        slice.readerIndex(slice.writerIndex());
+        try {
+            slice.writeBytes(in.markReaderIndex());
+        } finally {
+            in.resetReaderIndex();
+        }
+        // Waterdog end
 
         Object packetTypeInfo = null;
         try
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
index d4b03843..98ecafec 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
@@ -23,4 +23,14 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
         DefinedPacket.writeVarInt( prot.getId( msg.getClass(), protocolVersion ), out );
         msg.write( out, prot.getDirection(), protocolVersion );
     }
+
+    // Waterdog start
+    @Override
+    public boolean acceptOutboundMessage(Object msg) throws Exception {
+        Protocol.DirectionData prot = ( server ) ? protocol.TO_CLIENT : protocol.TO_SERVER;
+        if (ProtocolConstants.isPE(protocolVersion) && msg instanceof DefinedPacket &&
+                !prot.hasPacket(((DefinedPacket) msg).getClass(), protocolVersion)) return false;
+        return super.acceptOutboundMessage(msg);
+    }
+    // Waterdog end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 87093807..1dd50291 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -51,6 +51,16 @@ public enum Protocol
     {
 
         {
+            // Waterdog start
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEHandshake.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x01 )
+            );
+            TO_CLIENT.registerPacket(
+                    KeepAlive.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 )
+            );
+            // Waterdog end
             TO_SERVER.registerPacket(
                     Handshake.class,
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
@@ -62,8 +72,55 @@ public enum Protocol
     {
 
         {
+            // Waterdog start
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourcePack.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x06 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourceStack.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x07 )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x54 )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEResourcePackResponse.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x08 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PELogin.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x0B )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PETransfer.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x55 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x6b )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PERemoveObjectivePacket.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x6a )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PECommand.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x4D )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PELocalPlayerInitialized.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x71 )
+            );
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEStopSoundPacket.class,
+                    Protocol.map( ProtocolConstants.MINECRAFT_PE_1_8, 0x57 )
+            );
+            // Waterdog end
             TO_CLIENT.registerPacket(
                     KeepAlive.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x21 ),
@@ -77,12 +134,14 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Chat.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x09 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0F ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0E )
             );
             TO_CLIENT.registerPacket(
                     Respawn.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x3D ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x07 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x33 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x34 ),
@@ -92,6 +151,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     BossBar.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x4A ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0C )
             );
             // Waterfall start
@@ -167,6 +227,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     PluginMessage.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x75 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x3F ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x19 ),
@@ -174,6 +235,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     Kick.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x05 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x40 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x1A ),
                     map( ProtocolConstants.MINECRAFT_1_13, 0x1B ),
@@ -215,6 +277,7 @@ public enum Protocol
 
             TO_SERVER.registerPacket(
                     KeepAlive.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x00 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x0B ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0C ),
@@ -224,6 +287,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     Chat.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x09 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x01 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x02 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x03 ),
@@ -241,6 +305,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     ClientSettings.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x45 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x15 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x04 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x05 ),
@@ -249,6 +314,7 @@ public enum Protocol
             );
             TO_SERVER.registerPacket(
                     PluginMessage.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x75 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x17 ),
                     map( ProtocolConstants.MINECRAFT_1_9, 0x09 ),
                     map( ProtocolConstants.MINECRAFT_1_12, 0x0A ),
@@ -287,8 +353,19 @@ public enum Protocol
     {
 
         {
+            // Waterdog start
+            TO_CLIENT.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEEncryptionRequest.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x03 )
+            );
+            TO_SERVER.registerPacket(
+                    network.ycc.waterdog.pe.packet.PEEncryptionResponse.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x04 )
+            );
+            // Waterdog end
             TO_CLIENT.registerPacket(
                     Kick.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x05 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x00 )
             );
             TO_CLIENT.registerPacket(
@@ -297,6 +374,7 @@ public enum Protocol
             );
             TO_CLIENT.registerPacket(
                     LoginSuccess.class,
+                    map( ProtocolConstants.MINECRAFT_PE_1_8, 0x02 ), // Waterdog
                     map( ProtocolConstants.MINECRAFT_1_8, 0x02 )
             );
             TO_CLIENT.registerPacket(
@@ -419,6 +497,13 @@ public enum Protocol
             return supportsForge || i >= 0 && i <= MAX_PACKET_ID;
         }
 
+        // Waterdog start
+        public boolean hasPacket(Class<? extends DefinedPacket> packet, int version) {
+            ProtocolData protocol = protocols.get( version );
+            return protocol.packetMap.containsKey(packet);
+        }
+        // Waterdog end
+
         public final DefinedPacket createPacket(int id, int version)
         {
             return createPacket(id, version, true);
@@ -433,6 +518,7 @@ public enum Protocol
             }
             if ( !hasPacket(id, supportsForge) )
             {
+                if (ProtocolConstants.isPE(version)) return null; // Waterdog - negative packet ids
                 throw new BadPacketException( "Packet with id " + id + " outside of range " );
             }
 
@@ -456,6 +542,13 @@ public enum Protocol
                 ProtocolMapping mapping = mappings[mappingIndex];
                 for ( int protocol : ProtocolConstants.SUPPORTED_VERSION_IDS )
                 {
+                    // Waterdog start - dont carry pe mappings into pc
+                    while (protocol > 0 && mapping.protocolVersion < 0) {
+                        if (mappingIndex + 1 < mappings.length) mapping = mappings[++mappingIndex];
+                        else return;
+                    }
+                    // Waterdog end
+
                     if ( protocol < mapping.protocolVersion )
                     {
                         // This is a new packet, skip it till we reach the next protocol
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
index ff1f28aa..a9a06786 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/ProtocolConstants.java
@@ -6,6 +6,15 @@ import java.util.List;
 public class ProtocolConstants
 {
 
+    // Waterdog start
+    public static final int PE_PROTOCOL_OFFSET = 2000;
+    public static final int MINECRAFT_PE_1_8 = 313 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_9 = 332 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_10 = 340 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_11 = 354 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_12 = 361 - PE_PROTOCOL_OFFSET;
+    public static final int MINECRAFT_PE_1_13 = 370 - PE_PROTOCOL_OFFSET;
+    // Waterdog end
     public static final int MINECRAFT_1_8 = 47;
     public static final int MINECRAFT_1_9 = 107;
     public static final int MINECRAFT_1_9_1 = 108;
@@ -26,6 +35,14 @@ public class ProtocolConstants
     public static final int MINECRAFT_1_14_3 = 490;
     public static final int MINECRAFT_1_14_4 = 498;
     public static final List<String> SUPPORTED_VERSIONS = Arrays.asList(
+            // Waterdog start
+            "PE-1.8.x",
+            "PE-1.9.x",
+            "PE-1.10.x",
+            "PE-1.11.x",
+            "PE-1.12.x",
+            "PE-1.13.x",
+            // Waterdog end
             "1.8.x",
             "1.9.x",
             "1.10.x",
@@ -35,6 +52,14 @@ public class ProtocolConstants
             "1.14.x"
     );
     public static final List<Integer> SUPPORTED_VERSION_IDS = Arrays.asList(
+            // Waterdog start
+            ProtocolConstants.MINECRAFT_PE_1_8,
+            ProtocolConstants.MINECRAFT_PE_1_9,
+            ProtocolConstants.MINECRAFT_PE_1_10,
+            ProtocolConstants.MINECRAFT_PE_1_11,
+            ProtocolConstants.MINECRAFT_PE_1_12,
+            ProtocolConstants.MINECRAFT_PE_1_13,
+            // Waterdog end
             ProtocolConstants.MINECRAFT_1_8,
             ProtocolConstants.MINECRAFT_1_9,
             ProtocolConstants.MINECRAFT_1_9_1,
@@ -58,14 +83,22 @@ public class ProtocolConstants
 
     public static final boolean isBeforeOrEq(int before, int other)
     {
+            if (isPE(before) != isPE(other)) return false; // Waterdog - no compare PE
             return before <= other;
     }
 
     public static final boolean isAfterOrEq(int after, int other)
     {
+            if (isPE(after) != isPE(other)) return false; // Waterdog - no compare PE
             return after >= other;
     }
 
+    // Waterdog start
+    public static final boolean isPE(int v) {
+        return v < -1;
+    }
+    // Waterdog end
+
     public enum Direction
     {
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
index a26fba6e..fec892ec 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/BossBar.java
@@ -32,6 +32,64 @@ public class BossBar extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            uuid = new UUID(0, readSVarLong(buf));
+            final int peAction = readVarInt(buf);
+            try {
+                title = "";
+                health = 1.0f;
+                color = 5;
+                division = 0;
+                switch (peAction) {
+                    // Add
+                    case 0:
+                        action = 0;
+                        title = readString(buf);
+                        health = buf.readFloatLE();
+                        buf.readShortLE(); // darken screen
+                        color = readVarInt(buf);
+                        division = readVarInt(buf);
+                        break;
+                    // Remove
+                    case 2:
+                        action = 1;
+                        break;
+                    // Player add
+                    case 1:
+                        // Player remove
+                    case 3:
+                        action = peAction == 1 ? 6 : 7;
+                        readVarInt(buf); // player id
+                        break;
+                    // Health
+                    case 4:
+                        action = 2;
+                        health = buf.readFloatLE();
+                        break;
+                    // Title
+                    case 5:
+                        action = 3;
+                        title = readString(buf);
+                        break;
+                    // Flags
+                    case 6:
+                        action = 5;
+                        buf.readShortLE(); // darken screen
+                        color = readVarInt(buf);
+                        division = readVarInt(buf);
+                        break;
+                    // Style
+                    case 7:
+                        action = 4;
+                        color = readVarInt(buf);
+                        division = readVarInt(buf);
+                        break;
+                }
+            } catch (IndexOutOfBoundsException e) {} //Support truncated format too
+            return;
+        }
+        // Waterdog end
         uuid = readUUID( buf );
         action = readVarInt( buf );
 
@@ -68,6 +126,59 @@ public class BossBar extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            writeSVarLong(uuid.getLeastSignificantBits(), buf);
+            switch (action) {
+                // Add
+                case 0:
+                    writeVarInt(0, buf);
+                    writeString(title, buf);
+                    buf.writeFloatLE(health);
+                    buf.writeShortLE(12); // darken
+                    writeVarInt(color, buf);
+                    writeVarInt(division, buf);
+                    break;
+                // Remove
+                case 1:
+                    writeVarInt(2, buf);
+                    break;
+                // Health
+                case 2:
+                    writeVarInt(4, buf);
+                    buf.writeFloatLE(health);
+                    break;
+                // Title
+                case 3:
+                    writeVarInt(5, buf);
+                    writeString(title, buf);
+                    break;
+                // Style
+                case 4:
+                    writeVarInt(7, buf);
+                    writeVarInt(color, buf);
+                    writeVarInt(division, buf);
+                    break;
+                // Flags
+                case 5:
+                    writeVarInt(6, buf);
+                    buf.writeShortLE(12); // darken
+                    writeVarInt(color, buf);
+                    writeVarInt(division, buf);
+                    break;
+                // Player add
+                case 6:
+                // Player remove
+                case 7:
+                    writeVarInt(action == 6 ? 1 : 3, buf);
+                    writeVarInt(0, buf); // player id
+                    break;
+                default:
+                    writeVarInt(action, buf);
+            }
+            return;
+        }
+        // Waterdog end
         writeUUID( uuid, buf );
         writeVarInt( action, buf );
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
index 0ded6739..4485e26f 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Chat.java
@@ -15,7 +15,6 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 @EqualsAndHashCode(callSuper = false)
 public class Chat extends DefinedPacket
 {
-
     private String message;
     private byte position;
 
@@ -27,6 +26,20 @@ public class Chat extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            position = (byte) network.ycc.waterdog.pe.PEDataValues.getPcChatType(buf.readUnsignedByte());
+            buf.readBoolean(); //needs translation
+            if (direction == ProtocolConstants.Direction.TO_SERVER) {
+                readString(buf); //sender
+                message = readString(buf);
+            } else {
+                message = net.md_5.bungee.chat.ComponentSerializer.toString(net.md_5.bungee.api.chat.TextComponent.fromLegacyText(readString(buf)));
+            }
+            buf.skipBytes(buf.readableBytes());
+            return;
+        }
+        // Waterdog end
         // Waterfall start
         if (direction == ProtocolConstants.Direction.TO_CLIENT) {
             this.message = readString(buf, Short.MAX_VALUE * 8 + 8);
@@ -42,6 +55,21 @@ public class Chat extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            buf.writeByte(network.ycc.waterdog.pe.PEDataValues.getPeChatType(position, direction));
+            buf.writeBoolean(false);
+            if (direction == ProtocolConstants.Direction.TO_SERVER) {
+                writeString("", buf); //sender
+                writeString(message, buf);
+            } else {
+                writeString(net.md_5.bungee.chat.ComponentSerializer.parse(message)[0].toLegacyText(), buf);
+            }
+            writeString("", buf);
+            writeString("", buf);
+            return;
+        }
+        // Waterdog end
         // Waterfall start
         if (direction == ProtocolConstants.Direction.TO_CLIENT) {
             writeString(this.message, Short.MAX_VALUE * 8 + 8, buf);
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
index 9daf7a73..49d13a34 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/ClientSettings.java
@@ -27,6 +27,13 @@ public class ClientSettings extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            viewDistance = (byte) readSVarInt(buf);
+            locale = "";
+            return;
+        }
+        // Waterdog end
         locale = readString( buf );
         viewDistance = buf.readByte();
         chatFlags = protocolVersion >= ProtocolConstants.MINECRAFT_1_9 ? DefinedPacket.readVarInt( buf ) : buf.readUnsignedByte();
@@ -41,6 +48,12 @@ public class ClientSettings extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            writeSVarInt(viewDistance, buf);
+            return;
+        }
+        // Waterdog end
         writeString( locale, buf );
         buf.writeByte( viewDistance );
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_9 )
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
index b004bc41..2caa02eb 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/KeepAlive.java
@@ -21,12 +21,19 @@ public class KeepAlive extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start - empty keepalive
+        if (ProtocolConstants.isPE(protocolVersion)) {
+            buf.skipBytes(buf.readableBytes());
+            return;
+        }
+        // Waterdog end
         randomId = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 ) ? buf.readLong() : readVarInt( buf );
     }
 
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        if (ProtocolConstants.isPE(protocolVersion)) return; // Waterdog - empty keepalive
         if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_12_2 )
         {
             buf.writeLong( randomId );
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java
index 3976d91c..25cc4b68 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Kick.java
@@ -18,14 +18,32 @@ public class Kick extends DefinedPacket
     private String message;
 
     @Override
-    public void read(ByteBuf buf)
+    public void read(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            buf.readBoolean(); //hide disconnect screen
+            message = net.md_5.bungee.chat.ComponentSerializer.toString(new net.md_5.bungee.api.chat.TextComponent(readString(buf)));
+            return;
+        }
+        // Waterdog end
         message = readString( buf );
     }
 
     @Override
-    public void write(ByteBuf buf)
+    public void write(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            buf.writeBoolean( false ); // hide disconnect screen
+            String disconnectText = net.md_5.bungee.chat.ComponentSerializer.parse(message)[0].toLegacyText();
+            if (disconnectText.startsWith("§f")) {
+                disconnectText = disconnectText.substring(2);
+            }
+            writeString(disconnectText, buf);
+            return;
+        }
+        // Waterdog end
         writeString( message, buf );
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
index 2aa5ad58..e783eb46 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/LoginSuccess.java
@@ -14,22 +14,47 @@ import net.md_5.bungee.protocol.DefinedPacket;
 @EqualsAndHashCode(callSuper = false)
 public class LoginSuccess extends DefinedPacket
 {
+    // Waterdog start
+    public static final int PE_LOGIN_SUCCESS = 0;
+    public static final int PE_LOGIN_FAILED_CLIENT = 1;
+    public static final int PE_LOGIN_FAILED_SERVER = 2;
+    public static final int PE_PLAYER_SPAWN = 3;
+
+    private int statusCode = PE_LOGIN_SUCCESS;
+
+    public LoginSuccess(String uuid, String username) {
+        this.uuid = uuid;
+        this.username = username;
+    }
+    // Waterdog end
 
     private String uuid;
     private String username;
 
     @Override
-    public void read(ByteBuf buf)
+    public void read(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
-        uuid = readString( buf );
-        username = readString( buf );
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            statusCode = buf.readInt();
+            return;
+        }
+        // Waterdog end
+        uuid = readString(buf);
+        username = readString(buf);
     }
 
     @Override
-    public void write(ByteBuf buf)
+    public void write(ByteBuf buf, net.md_5.bungee.protocol.ProtocolConstants.Direction direction, int protocolVersion) // Waterdog
     {
-        writeString( uuid, buf );
-        writeString( username, buf );
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            buf.writeInt(statusCode);
+            return;
+        }
+        // Waterdog end
+        writeString(uuid, buf);
+        writeString(username, buf);
     }
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
index 17e12655..421fac14 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PluginMessage.java
@@ -82,7 +82,8 @@ public class PluginMessage extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( readString( buf ) ) : readString( buf );
+        tag = ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 || ProtocolConstants.isPE(protocolVersion) ) ? MODERNISE.apply( readString( buf ) ) : readString( buf ); // Waterdog
+        if (ProtocolConstants.isPE(protocolVersion) && buf.isReadable()) buf = buf.readSlice(readVarInt(buf)); // Waterdog - varint slice
         int maxSize = direction == ProtocolConstants.Direction.TO_SERVER ? Short.MAX_VALUE : 0x100000;
         Preconditions.checkArgument( buf.readableBytes() < maxSize );
         data = new byte[ buf.readableBytes() ];
@@ -92,7 +93,8 @@ public class PluginMessage extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
-        writeString( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 ) ? MODERNISE.apply( tag ) : tag, buf );
+        writeString( ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 || ProtocolConstants.isPE(protocolVersion) ) ? MODERNISE.apply( tag ) : tag, buf ); // Waterdog
+        if (ProtocolConstants.isPE(protocolVersion)) writeVarInt(data.length, buf); // Waterdog - varint lengths
         buf.writeBytes( data );
     }
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
index dbb24e22..112c7229 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/Respawn.java
@@ -24,6 +24,16 @@ public class Respawn extends DefinedPacket
     @Override
     public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            dimension = network.ycc.waterdog.pe.PEDataValues.getPcDimensionId(readSVarInt(buf));
+            buf.readFloatLE(); //x
+            buf.readFloatLE(); //y
+            buf.readFloatLE(); //z
+            buf.readBoolean(); //respawn
+            return;
+        }
+        // Waterdog end
         dimension = buf.readInt();
         if ( protocolVersion < ProtocolConstants.MINECRAFT_1_14 )
         {
@@ -36,6 +46,16 @@ public class Respawn extends DefinedPacket
     @Override
     public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
     {
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(protocolVersion)) {
+            writeSVarInt(network.ycc.waterdog.pe.PEDataValues.getPeDimensionId(dimension), buf);
+            buf.writeFloatLE(0); //x
+            buf.writeFloatLE(300); //y
+            buf.writeFloatLE(0); //z
+            buf.writeBoolean(true); //respawn
+            return;
+        }
+        // Waterdog end
         buf.writeInt( dimension );
         if ( protocolVersion < ProtocolConstants.MINECRAFT_1_14 )
         {
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java b/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
index 1d85c399..e1be044d 100644
--- a/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
@@ -139,6 +139,7 @@ public abstract class PEBlockRewrite {
 
     protected void rewriteChunkSections(ByteBuf in, ByteBuf out, int sections) {
         for (int section = 0 ; section < sections ; section++) {
+            boolean notSupported = false;
             final int subchunkVersion = in.readUnsignedByte();
             out.writeByte(subchunkVersion);
             switch (subchunkVersion) {
@@ -150,11 +151,17 @@ public abstract class PEBlockRewrite {
                     rewriteV8ChunkSection(in, out);
                     break;
                 default: //unsupported
-                    throw new IllegalArgumentException("Unknown subchunk format " + subchunkVersion);
+                    //TODO: erm, what changed here?
+                    //throw new IllegalArgumentException("Unknown subchunk format " + subchunkVersion);
+                    notSupported = true;
+                    System.out.println("PEBlockRewrite: Unknown subchunk format " + subchunkVersion);
+                    break;
+            }
+            if (notSupported) {
+                break;
             }
         }
-        out.writeBytes(in, 512); //heightmap
-        out.writeBytes(in, 256); //biomedata
+        out.writeBytes(in); //copy the rest
     }
 
     protected void rewriteV8ChunkSection(ByteBuf in, ByteBuf out) {
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java
index dab227a1..12b52465 100644
--- a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEStopSoundPacket.java
@@ -19,7 +19,8 @@ public class PEStopSoundPacket extends DefinedPacket {
 
     @Override
     public void read( ByteBuf buf ) {
-        //Ignore
+        name = readString(buf);
+        stopAll = buf.readBoolean();
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 6b3de71f..0b86171b 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -248,6 +248,7 @@ public class BungeeCord extends ProxyServer
             }
             // Waterdog end
         }
+        network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.load(logger); // Waterdog
     }
 
     /**
@@ -339,6 +340,7 @@ public class BungeeCord extends ProxyServer
                     }
                 }
             };
+            if ( !info.isRakNet() ) { // Waterdog
             new ServerBootstrap()
                     .channel( PipelineUtils.getServerChannel() )
                     .option( ChannelOption.SO_REUSEADDR, true ) // TODO: Move this elsewhere!
@@ -347,8 +349,23 @@ public class BungeeCord extends ProxyServer
                     .group( bossEventLoopGroup, workerEventLoopGroup )
                     .localAddress( info.getHost() )
                     .bind().addListener( listener );
+            // Waterdog start
+            } else {
+                network.ycc.waterdog.pe.PEPipelineUtils.multiServerBootstrap(listener, getLogger(), () ->
+                    new ServerBootstrap()
+                    .channelFactory(() -> new network.ycc.raknet.server.channel.RakNetServerChannel(PipelineUtils.getDatagramChannel()))
+                    .option(network.ycc.raknet.RakNet.MAX_CONNECTIONS, info.getMaxPlayers())
+                    .option(network.ycc.raknet.RakNet.SERVER_ID, UUID.randomUUID().getMostSignificantBits())
+                    .childAttr(PipelineUtils.LISTENER, info)
+                    .handler(new network.ycc.waterdog.pe.PEPipelineUtils.ServerChannel(this, info))
+                    .childHandler(network.ycc.waterdog.pe.PEPipelineUtils.SERVER_CHILD)
+                    .group(bossEventLoopGroup, workerEventLoopGroup)
+                    .localAddress(info.getHost())
+                );
+            }
+            // Waterdog end
 
-            if ( info.isQueryEnabled() )
+            if ( info.needsRealQuery() ) // Waterdog
             {
                 ChannelFutureListener bindListener = new ChannelFutureListener()
                 {
@@ -644,7 +661,7 @@ public class BungeeCord extends ProxyServer
 
     public PluginMessage registerChannels(int protocolVersion)
     {
-        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 )
+        if ( protocolVersion >= ProtocolConstants.MINECRAFT_1_13 || ProtocolConstants.isPE(protocolVersion) )
         {
             return new PluginMessage( "minecraft:register", Util.format( Iterables.transform( pluginChannels, PluginMessage.MODERNISE ), "\00" ).getBytes( Charsets.UTF_8 ), false );
         }
@@ -665,9 +682,9 @@ public class BungeeCord extends ProxyServer
     }
 
     @Override
-    public ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted)
+    public ServerInfo constructServerInfo(String name, InetSocketAddress address, String motd, boolean restricted, boolean isRakNet, String transferGroup) // Waterdog
     {
-        return new BungeeServerInfo( name, address, motd, restricted );
+        return new BungeeServerInfo( name, address, motd, restricted, isRakNet, transferGroup ); // Waterdog
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 4c0637b9..f2898669 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -34,6 +34,7 @@ import net.md_5.bungee.protocol.packet.PluginMessage;
 @ToString(of =
 {
     "name", "address", "restricted"
+    , "raknet" // Waterdog
 })
 public class BungeeServerInfo implements ServerInfo
 {
@@ -50,6 +51,22 @@ public class BungeeServerInfo implements ServerInfo
     @Getter
     private final Queue<DefinedPacket> packetQueue = new LinkedList<>();
 
+    // Waterdog start
+    public BungeeServerInfo(String name, InetSocketAddress address, String motd, boolean restricted) {
+        this.name = name;
+        this.address = address;
+        this.motd = motd;
+        this.restricted = restricted;
+        this.rakNet = true;
+        this.transferGroup = "default";
+    }
+
+    @Getter
+    private final boolean rakNet;
+    @Getter
+    private final String transferGroup;
+    // Waterdog end
+
     @Synchronized("players")
     public void addPlayer(ProxiedPlayer player)
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 72f487dc..a25d8a82 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -52,6 +52,7 @@ import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.protocol.packet.ViewDistance;
 import net.md_5.bungee.util.BufUtil;
 import net.md_5.bungee.util.QuietException;
+import network.ycc.waterdog.pe.packet.PEHandshake;
 
 @RequiredArgsConstructor
 public class ServerConnector extends PacketHandler
@@ -99,7 +100,15 @@ public class ServerConnector extends PacketHandler
         Handshake originalHandshake = user.getPendingConnection().getHandshake();
         Handshake copiedHandshake = new Handshake( originalHandshake.getProtocolVersion(), originalHandshake.getHost(), originalHandshake.getPort(), 2 );
 
-        if ( BungeeCord.getInstance().config.isIpForward() )
+        // Waterdog start - PE handshake
+        if (originalHandshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            network.ycc.waterdog.pe.packet.PEHandshake oPEHandshake = (network.ycc.waterdog.pe.packet.PEHandshake) originalHandshake;
+            copiedHandshake = new network.ycc.waterdog.pe.packet.PEHandshake( originalHandshake.getProtocolVersion(),
+                    originalHandshake.getHost(), originalHandshake.getPort(), user.getName(), user.getUniqueId(),
+                    oPEHandshake.isAuthorized(), oPEHandshake.getClientInfo(), oPEHandshake.getXuid() );
+        }
+        // Waterdog end
+        if ( BungeeCord.getInstance().config.isIpForward() && !target.isRakNet()) // Waterdog
         {
             String newHost = copiedHandshake.getHost() + "\00" + user.getAddress().getHostString() + "\00" + user.getUUID();
 
@@ -140,9 +149,16 @@ public class ServerConnector extends PacketHandler
             copiedHandshake.setHost( copiedHandshake.getHost() + user.getExtraDataInHandshake() );
         }
 
+        // Waterdog start - PE handshake
+        if (originalHandshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            network.ycc.waterdog.pe.PEEncryptionUtils.createHandshake((PEHandshake) copiedHandshake);
+        }
+        // Waterdog end
+
         channel.write( copiedHandshake );
 
         channel.setProtocol( Protocol.LOGIN );
+        if (!(originalHandshake instanceof network.ycc.waterdog.pe.packet.PEHandshake)) // Waterdog - no LoginRequest for PE
         channel.write( new LoginRequest( user.getName() ) );
     }
 
@@ -157,6 +173,12 @@ public class ServerConnector extends PacketHandler
     {
         if ( packet.packet == null )
         {
+            // Waterdog start - handle inventory data sent before Login
+            if (ProtocolConstants.isPE(user.getPendingConnection().getVersion())) {
+                user.sendPacket(packet);
+                return;
+            }
+            // Waterdog end
             throw new QuietException( "Unexpected packet received during server login process!\n" + BufUtil.dump( packet.buf, 16 ) );
         }
     }
@@ -164,6 +186,15 @@ public class ServerConnector extends PacketHandler
     @Override
     public void handle(LoginSuccess loginSuccess) throws Exception
     {
+        // Waterdog start
+        if (loginSuccess.getStatusCode() == LoginSuccess.PE_LOGIN_FAILED_CLIENT) {
+            handle(new Kick("disconnectionScreen.outdatedClient"));
+            throw CancelSendSignal.INSTANCE;
+        } else if (loginSuccess.getStatusCode() == LoginSuccess.PE_LOGIN_FAILED_SERVER) {
+            handle(new Kick("disconnectionScreen.outdatedServer"));
+            throw CancelSendSignal.INSTANCE;
+        }
+        // Waterdog end
         Preconditions.checkState( thisState == State.LOGIN_SUCCESS, "Not expecting LOGIN_SUCCESS" );
         ch.setProtocol( Protocol.GAME );
         thisState = State.LOGIN;
@@ -196,6 +227,30 @@ public class ServerConnector extends PacketHandler
         ch.setCompressionThreshold( setCompression.getThreshold() );
     }
 
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePack resourcePack) throws Exception
+    {
+        ch.write(new network.ycc.waterdog.pe.packet.PEResourcePackResponse(network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_HAVE_ALL_PACKS));
+        throw CancelSendSignal.INSTANCE;
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourceStack resourceStack) throws Exception
+    {
+        ch.write(new network.ycc.waterdog.pe.packet.PEResourcePackResponse(network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_COMPLETED));
+        throw CancelSendSignal.INSTANCE;
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionRequest request) throws Exception
+    {
+        ch.getHandle().pipeline().addLast(new network.ycc.waterdog.pe.PEEncryptionInitializer(request));
+        ch.write(new network.ycc.waterdog.pe.packet.PEEncryptionResponse());
+        throw CancelSendSignal.INSTANCE;
+    }
+    // Waterdog end
+
     @Override
     public void handle(Login login) throws Exception
     {
@@ -246,6 +301,29 @@ public class ServerConnector extends PacketHandler
             Login modLogin = new Login( login.getEntityId(), login.getGameMode(), (byte) login.getDimension(), login.getDifficulty(),
                     (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(), login.getViewDistance(), login.isReducedDebugInfo() );
 
+            // Waterdog start
+            if (login instanceof network.ycc.waterdog.pe.packet.PELogin) {
+                network.ycc.waterdog.pe.packet.PELogin peLogin = (network.ycc.waterdog.pe.packet.PELogin) login;
+
+                modLogin = new network.ycc.waterdog.pe.packet.PELogin( login.getEntityId(),
+                        login.getGameMode(), (byte) login.getDimension(), login.getDifficulty(),
+                        (byte) user.getPendingConnection().getListener().getTabListSize(), login.getLevelType(),
+                        login.getViewDistance(), login.isReducedDebugInfo(), peLogin.getTailPayload() );
+
+                ByteBuf paletteData = io.netty.buffer.Unpooled.wrappedBuffer(peLogin.getTailPayload())
+                        .skipBytes(peLogin.getPayloadPaletteOffset())
+                        .readSlice(peLogin.getPayloadPaletteLength());
+
+                network.ycc.waterdog.pe.PEBlockPalette palette = network.ycc.waterdog.pe.PEBlockPalette.get(
+                        paletteData, user.getPendingConnection().getVersion());
+
+                user.setClientBlockPalette(palette);
+                user.setBlockRewrite(palette.createRewrite(palette));
+
+                peLogin.setTailPayload(null); //save heap space
+            }
+            // Waterdog end
+
             user.unsafe().sendPacket( modLogin );
 
             ByteBuf brand = ByteBufAllocator.DEFAULT.heapBuffer();
@@ -260,6 +338,13 @@ public class ServerConnector extends PacketHandler
             user.getTabListHandler().onServerChange();
 
             Scoreboard serverScoreboard = user.getServerSentScoreboard();
+            // Waterdog start
+            if (login instanceof network.ycc.waterdog.pe.packet.PELogin) {
+                for ( Objective objective : serverScoreboard.getObjectives() ) {
+                    user.unsafe().sendPacket(new network.ycc.waterdog.pe.packet.PERemoveObjectivePacket(objective.getName()));
+                }
+            } else
+            // Waterdog end
             if ( !user.isDisableEntityMetadataRewrite() ) { // Waterfall
             for ( Objective objective : serverScoreboard.getObjectives() )
             {
@@ -320,6 +405,39 @@ public class ServerConnector extends PacketHandler
             }
             user.setDimension( login.getDimension() );
 
+            // Waterdog start
+            if (login instanceof network.ycc.waterdog.pe.packet.PELogin) {
+                final network.ycc.waterdog.pe.packet.PELogin peLogin = (network.ycc.waterdog.pe.packet.PELogin) login;
+
+                network.ycc.waterdog.pe.PERawPacketData.injectChunkPublisherUpdate(user.getCh().getHandle(),
+                        (int) peLogin.getSpawnX(), (int) peLogin.getSpawnY(), (int) peLogin.getSpawnZ());
+                network.ycc.waterdog.pe.PERawPacketData.injectGameMode(user.getCh().getHandle(), login.getGameMode());
+
+                server.unsafe().sendPacket(new network.ycc.waterdog.pe.packet.PELocalPlayerInitialized(login.getEntityId()));
+
+                ByteBuf paletteData = io.netty.buffer.Unpooled.wrappedBuffer(peLogin.getTailPayload())
+                        .skipBytes(peLogin.getPayloadPaletteOffset())
+                        .readSlice(peLogin.getPayloadPaletteLength());
+
+                network.ycc.waterdog.pe.PEBlockPalette palette = network.ycc.waterdog.pe.PEBlockPalette.get(
+                        paletteData, user.getPendingConnection().getVersion());
+                user.setBlockRewrite(palette.createRewrite(user.getClientBlockPalette()));
+
+                java.util.Collection<java.util.UUID> playerList = user.getPePlayerList();
+                playerList.forEach(uuid ->
+                        network.ycc.waterdog.pe.PERawPacketData.injectRemovePlayerList(user.getCh().getHandle(), uuid));
+
+                it.unimi.dsi.fastutil.longs.LongSet entityIDs = user.getEntityIDs();
+                entityIDs.forEach((java.util.function.LongConsumer) id ->
+                        network.ycc.waterdog.pe.PERawPacketData.injectRemoveEntity(user.getCh().getHandle(), id));
+                entityIDs.clear();
+
+                user.unsafe().sendPacket( new network.ycc.waterdog.pe.packet.PEStopSoundPacket( "portal.travel", true ) );
+
+                network.ycc.waterdog.pe.PERawPacketData.injectRemoveAllEffects(user.getCh().getHandle(), user.getClientEntityId());
+            }
+            // Waterdog end
+
             // Remove from old servers
             user.getServer().disconnect( "Quitting" );
         }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 15f7c5b5..1a6b4dbb 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -131,6 +131,18 @@ public final class UserConnection implements ProxiedPlayer
     @Getter
     private final Multimap<Integer, Integer> potions = HashMultimap.create();
     // Waterfall end
+    // Waterdog start
+    @Getter
+    @Setter
+    private network.ycc.waterdog.pe.PEBlockPalette clientBlockPalette;
+    @Getter
+    @Setter
+    private network.ycc.waterdog.pe.PEBlockRewrite blockRewrite;
+    @Getter
+    private final it.unimi.dsi.fastutil.longs.LongSet entityIDs = new it.unimi.dsi.fastutil.longs.LongOpenHashSet();
+    @Getter
+    private final Collection<UUID> pePlayerList = new HashSet<>();
+    // Waterdog end
     /*========================================================================*/
     @Getter
     private String displayName;
@@ -152,6 +164,13 @@ public final class UserConnection implements ProxiedPlayer
         public void sendPacket(DefinedPacket packet)
         {
             ch.write( packet );
+            // Waterdog start
+            if (packet instanceof net.md_5.bungee.protocol.packet.Respawn &&
+                    net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())) {
+                // TODO: find a better place for this
+                network.ycc.waterdog.pe.PERawPacketData.injectForcedDimChange(ch.getHandle(), getPendingConnection().getVersion());
+            }
+            // Waterdog end
         }
     };
 
@@ -343,6 +362,17 @@ public final class UserConnection implements ProxiedPlayer
             return;
         }
 
+        // Waterdog start
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion()) && getServer() != null
+                && !getServer().getInfo().getTransferGroup().equals(target.getTransferGroup())) {
+            reconnectServer = request.getTarget();
+            InetSocketAddress vHost = getPendingConnection().getVirtualHost();
+            unsafe().sendPacket(new network.ycc.waterdog.pe.packet.PETransfer(vHost.getHostString(), vHost.getPort()));
+            disconnect("PE Server Transfer");
+            return;
+        }
+        // Waterdog end
+
         pendingConnects.add( target );
 
         ChannelInitializer initializer = new ChannelInitializer()
@@ -350,10 +380,29 @@ public final class UserConnection implements ProxiedPlayer
             @Override
             protected void initChannel(Channel ch) throws Exception
             {
+                // Waterdog start
+                if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())) {
+                    if (!target.isRakNet()) {
+                        ch.pipeline().addLast(new protocolsupport.protocol.connection.PSInitEncapsulation(getAddress(), false));
+                    } else {
+                        ch.pipeline()
+                        .addLast(network.ycc.raknet.pipeline.UserDataCodec.NAME, network.ycc.waterdog.pe.PEPipelineUtils.MC_USER_DATA_CODEC)
+                        .addLast(network.ycc.waterdog.pe.PECompressor.NAME, new network.ycc.waterdog.pe.PECompressor())
+                        .addLast(network.ycc.waterdog.pe.PEDecompressor.NAME, new network.ycc.waterdog.pe.PEDecompressor());
+                        network.ycc.waterdog.pe.PEPipelineUtils.moveTimeout(ch);
+                    }
+                }
+                // Waterdog end
                 PipelineUtils.BASE.initChannel( ch );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion(), bungee.getConfig().isAllowEmptyPackets() ) ); // Waterfall
                 ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
+                // Waterdog start
+                if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion()) && target.isRakNet()) {
+                    ch.pipeline().replace(PipelineUtils.FRAME_DECODER, PipelineUtils.FRAME_DECODER, new io.netty.channel.ChannelInboundHandlerAdapter());
+                    ch.pipeline().replace(PipelineUtils.FRAME_PREPENDER, PipelineUtils.FRAME_PREPENDER, new io.netty.channel.ChannelInboundHandlerAdapter());
+                }
+                // Waterdog end
             }
         };
         ChannelFutureListener listener = new ChannelFutureListener()
@@ -387,12 +436,25 @@ public final class UserConnection implements ProxiedPlayer
                 }
             }
         };
-        Bootstrap b = new Bootstrap()
+        Bootstrap b; if (!target.isRakNet()) { // Waterdog
+        b = new Bootstrap()
                 .channel( PipelineUtils.getChannel() )
                 .group( ch.getHandle().eventLoop() )
                 .handler( initializer )
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout() )
                 .remoteAddress( target.getAddress() );
+        // Waterdog start
+        } else {
+            final int maxMTU = BungeeCord.getInstance().config.getMaxMTU();
+            b = new Bootstrap()
+                .channelFactory(() -> new network.ycc.raknet.client.channel.RakNetClientChannel(PipelineUtils.getDatagramChannel()))
+                .group(ch.getHandle().eventLoop())
+                .handler( initializer )
+                .option(network.ycc.raknet.RakNet.MTU, maxMTU == -1 ? network.ycc.raknet.config.DefaultConfig.DEFAULT_MTU : maxMTU) //some servers hate large frames
+                .option(ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout())
+                .remoteAddress(target.getAddress());
+        }
+        // Waterdog end
         // Windows is bugged, multi homed users will just have to live with random connecting IPs
         if ( getPendingConnection().getListener().isSetLocalAddress() && !PlatformDependent.isWindows() )
         {
@@ -604,7 +666,22 @@ public final class UserConnection implements ProxiedPlayer
     {
         this.settings = settings;
         this.locale = null;
+        // Waterdog start
+        if (pendingConnection != null && pendingConnection.getHandshake() instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            String localString = ((network.ycc.waterdog.pe.packet.PEHandshake) pendingConnection.getHandshake()).getClientInfo().get("LanguageCode").toString();
+            this.locale = Locale.forLanguageTag( localString.replace( '_', '-' ) );
+        }
+        // Waterdog end
+    }
+
+    // Waterdog start
+    public java.math.BigInteger getXUID() {
+        if (pendingConnection != null && pendingConnection.getHandshake() instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            return ((network.ycc.waterdog.pe.packet.PEHandshake) pendingConnection.getHandshake()).getXuid();
+        }
+        return null;
     }
+    // Waterdog end
 
     @Override
     public Locale getLocale()
@@ -719,6 +796,7 @@ public final class UserConnection implements ProxiedPlayer
 
     public void setCompressionThreshold(int compressionThreshold)
     {
+        if (net.md_5.bungee.protocol.ProtocolConstants.isPE(getPendingConnection().getVersion())) return; // Waterdog
         if ( !ch.isClosing() && this.compressionThreshold == -1 && compressionThreshold >= 0 )
         {
             this.compressionThreshold = compressionThreshold;
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
index 37fe6ac7..fdb26501 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
@@ -15,6 +15,7 @@ public class PacketDecompressor extends MessageToMessageDecoder<ByteBuf>
 {
 
     private final int compressionThreshold;
+    @Getter(value=AccessLevel.PROTECTED) // Waterdog
     private final BungeeZlib zlib = CompressFactory.zlib.newInstance();
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 5841cf63..20e224f0 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -68,6 +68,13 @@ public abstract class Configuration implements ProxyConfig
     private boolean preventProxyConnections;
     private boolean forgeSupport = true; // Waterfall: default to enabled
 
+    // Waterdog start
+    private boolean replaceUsernameSpaces = true;
+    private boolean useXUIDForUUID = true;
+    private boolean bedrockEncryption = true;
+    private int maxMTU = -1;
+    // Waterdog end
+
     @Synchronized("serversLock") // Waterfall
     public void load()
     {
@@ -99,6 +106,12 @@ public abstract class Configuration implements ProxyConfig
         compressionThreshold = adapter.getInt( "network_compression_threshold", compressionThreshold );
         preventProxyConnections = adapter.getBoolean( "prevent_proxy_connections", preventProxyConnections );
         forgeSupport = adapter.getBoolean( "forge_support", forgeSupport );
+        // Waterdog start
+        replaceUsernameSpaces = adapter.getBoolean( "replace_username_spaces", replaceUsernameSpaces );
+        useXUIDForUUID = adapter.getBoolean( "use_xuid_for_uuid", useXUIDForUUID);
+        bedrockEncryption = adapter.getBoolean( "bedrock_encryption", bedrockEncryption);
+        maxMTU = adapter.getInt( "max_mtu", maxMTU);
+        // Waterdog end
 
         disabledCommands = new CaseInsensitiveSet( (Collection<String>) adapter.getList( "disabled_commands", Arrays.asList( "disabledcommandhere" ) ) );
 
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index 44011a96..7f2f171b 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -226,8 +226,12 @@ public class YamlConfig implements ConfigurationAdapter
             String addr = get( "address", "localhost:25565", val );
             String motd = ChatColor.translateAlternateColorCodes( '&', get( "motd", "&1Just another Waterfall - Forced Host", val ) );
             boolean restricted = get( "restricted", false, val );
+            // Waterdog start
+            boolean isRakNet = get( "raknet", false, val );
+            String transferGroup = get( "transfer_group", "default", val );
+            // Waterdog end
             InetSocketAddress address = Util.getAddr( addr );
-            ServerInfo info = ProxyServer.getInstance().constructServerInfo( name, address, motd, restricted );
+            ServerInfo info = ProxyServer.getInstance().constructServerInfo( name, address, motd, restricted, isRakNet, transferGroup ); // Waterdog
             ret.put( name, info );
         }
 
@@ -241,12 +245,14 @@ public class YamlConfig implements ConfigurationAdapter
     {
         Collection<Map<String, Object>> base = get( "listeners", (Collection) Arrays.asList( new Map[]
         {
+            new HashMap(), // Waterdog
             new HashMap()
         } ) );
         Map<String, String> forcedDef = new HashMap<>();
         forcedDef.put( "pvp.md-5.net", "pvp" );
 
         Collection<ListenerInfo> ret = new HashSet<>();
+        boolean isFirst = true; // Waterdog
 
         for ( Map<String, Object> val : base )
         {
@@ -255,7 +261,7 @@ public class YamlConfig implements ConfigurationAdapter
 
             int maxPlayers = get( "max_players", 1, val );
             boolean forceDefault = get( "force_default_server", false, val );
-            String host = get( "host", "0.0.0.0:25577", val );
+            String host = get( "host", isFirst ? "0.0.0.0:25577" : "0.0.0.0:19132", val ); // Waterdog
             int tabListSize = get( "tab_size", 60, val );
             InetSocketAddress address = Util.getAddr( host );
             Map<String, String> forced = new CaseInsensitiveMap<>( get( "forced_hosts", forcedDef, val ) );
@@ -268,10 +274,11 @@ public class YamlConfig implements ConfigurationAdapter
             boolean setLocalAddress = get( "bind_local_address", true, val );
             boolean pingPassthrough = get( "ping_passthrough", false, val );
 
-            boolean query = get( "query_enabled", false, val );
-            int queryPort = get( "query_port", 25577, val );
+            boolean query = get( "query_enabled", isFirst ? false : true, val ); // Waterdog
+            int queryPort = get( "query_port", isFirst ? 25577 : 19132, val ); // Waterdog
 
             boolean proxyProtocol = get( "proxy_protocol", false, val );
+            boolean isRakNet = get( "raknet", !isFirst, val ); // Waterdog
             List<String> serverPriority = new ArrayList<>( get( "priorities", Collections.EMPTY_LIST, val ) );
 
             // Default server list migration
@@ -296,8 +303,9 @@ public class YamlConfig implements ConfigurationAdapter
             }
             set( "priorities", serverPriority, val );
 
-            ListenerInfo info = new ListenerInfo( address, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forced, value.toString(), setLocalAddress, pingPassthrough, queryPort, query, proxyProtocol );
+            ListenerInfo info = new ListenerInfo( address, motd, maxPlayers, tabListSize, serverPriority, forceDefault, forced, value.toString(), setLocalAddress, pingPassthrough, queryPort, query, proxyProtocol, isRakNet ); // Waterdog
             ret.add( info );
+            isFirst = false; // Waterdog
         }
 
         return ret;
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 1f8a2439..b61bb405 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -137,6 +137,21 @@ public class DownstreamBridge extends PacketHandler
     public void handle(PacketWrapper packet) throws Exception
     {
         con.getEntityRewrite().rewriteClientbound( packet.buf, con.getServerEntityId(), con.getClientEntityId(), con.getPendingConnection().getVersion() );
+        // Waterdog start
+        if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) {
+            if (con.getEntityRewrite() instanceof net.md_5.bungee.entitymap.EntityMap_PE) {
+                net.md_5.bungee.entitymap.EntityMap_PE entityMap = (net.md_5.bungee.entitymap.EntityMap_PE) con.getEntityRewrite();
+                it.unimi.dsi.fastutil.longs.LongSet entityIDs = con.getEntityIDs();
+                java.util.Collection<java.util.UUID> playerList = con.getPePlayerList();
+
+                entityMap.entityTrack(packet.buf, entityIDs::add, entityIDs::remove);
+                entityMap.playerListTrackRewrite(packet.buf, playerList::add, playerList::remove,
+                        con.getUniqueId(), con.getPendingConnection().getLoginId());
+            }
+
+            con.getBlockRewrite().rewriteClientbound(packet.buf, con.getPendingConnection().getVersion());
+        }
+        // Waterdog end
         con.sendPacket( packet );
     }
 
@@ -154,6 +169,21 @@ public class DownstreamBridge extends PacketHandler
         throw CancelSendSignal.INSTANCE; // Always throw because of profile rewriting
     }
 
+    // Waterdog start
+    public void handle(network.ycc.waterdog.pe.packet.PESetDisplayObjectivePacket setDisplayObjectivePacket) throws Exception
+    {
+        con.getServerSentScoreboard().removeObjective(setDisplayObjectivePacket.getObjectiveName());
+        con.getServerSentScoreboard().addObjective(new Objective(
+                setDisplayObjectivePacket.getObjectiveName(), setDisplayObjectivePacket.getDisplayName(),
+                setDisplayObjectivePacket.getDisplaySlot()));
+    }
+
+    public void handle(network.ycc.waterdog.pe.packet.PERemoveObjectivePacket removeObjectivePacket) throws Exception
+    {
+        con.getServerSentScoreboard().removeObjective(removeObjectivePacket.getObjectiveName());
+    }
+    // Waterdog end
+
     @Override
     public void handle(ScoreboardObjective objective) throws Exception
     {
@@ -463,6 +493,19 @@ public class DownstreamBridge extends PacketHandler
                     out.writeUTF( player.getUUID() );
                 }
             }
+            // Waterdog start
+            if ( subChannel.equals( "GetPing" ) )
+            {
+                out.writeInt( con.getPing() );
+            }
+            if ( subChannel.equals( "GetPingOther" ) )
+            {
+                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
+                if ( player != null ) {
+                    out.writeInt(player.getPing());
+                }
+            }
+            // Waterdog end
             if ( subChannel.equals( "ServerIP" ) )
             {
                 ServerInfo info = bungee.getServerInfo( in.readUTF() );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 3a9dab68..f382df5f 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -98,6 +98,10 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private UUID uniqueId;
     @Getter
     private UUID offlineId;
+    // Waterdog start
+    @Getter
+    private UUID loginId;
+    // Waterdog end
     @Getter
     private LoginResult loginProfile;
     @Getter
@@ -134,6 +138,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
+            if (true) return; // Waterdog - login garbage TODO: need better filtering
             throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
         }
     }
@@ -277,6 +282,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     public void handle(Handshake handshake) throws Exception
     {
         Preconditions.checkState( thisState == State.HANDSHAKE, "Not expecting HANDSHAKE" );
+        // Waterdog start - parse handshake
+        if (handshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+            network.ycc.waterdog.pe.PEEncryptionUtils.parseHandshake((network.ycc.waterdog.pe.packet.PEHandshake) handshake);
+        }
+        // Waterdog end
         this.handshake = handshake;
         ch.setVersion( handshake.getProtocolVersion() );
 
@@ -332,6 +342,27 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                     }
                     return;
                 }
+                // Waterdog start - condensed PE handshake
+                if (handshake instanceof network.ycc.waterdog.pe.packet.PEHandshake) {
+                    network.ycc.waterdog.pe.packet.PEHandshake peHandshake = (network.ycc.waterdog.pe.packet.PEHandshake) handshake;
+
+                    uniqueId = peHandshake.getUuid();
+                    loginId = peHandshake.getLoginUUID();
+                    //TODO: loginProfile?
+                    handle(new LoginRequest(peHandshake.getUsername()));
+
+                    peHandshake.getClientInfo().addProperty("WaterDog_RemoteIP", getAddress().getHostString()); //old format, deprecated.
+                    peHandshake.getClientInfo().addProperty("Waterdog_RemoteIP", getAddress().getHostString());
+                    if (peHandshake.getXuid() != null) {
+                        peHandshake.getClientInfo().addProperty("Waterdog_XUID", peHandshake.getXuid().toString());
+                    }
+
+                    if (isOnlineMode() && !peHandshake.isAuthorized()) {
+                        disconnect("disconnectionScreen.notAuthenticated");
+                        break;
+                    }
+                }
+                // Waterdog end
                 break;
             default:
                 throw new IllegalArgumentException( "Cannot request protocol " + handshake.getRequestedProtocol() );
@@ -371,6 +402,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             return;
         }
 
+        // Waterdog start
+        if (ProtocolConstants.isPE(getVersion()) && onlineMode && !((network.ycc.waterdog.pe.packet.PEHandshake) handshake).isAuthorized()) {
+            disconnect( bungee.getTranslation( "offline_mode_player" ) );
+            return;
+        }
+        // Waterdog end
+
         Callback<PreLoginEvent> callback = new Callback<PreLoginEvent>()
         {
 
@@ -386,6 +424,30 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 {
                     return;
                 }
+                // Waterdog start
+                if (ProtocolConstants.isPE(getVersion())) {
+                    network.ycc.waterdog.pe.packet.PEHandshake peHandshake =
+                            (network.ycc.waterdog.pe.packet.PEHandshake) handshake;
+                    if (onlineMode && BungeeCord.getInstance().config.isBedrockEncryption() && peHandshake.isAuthorized()) {
+                        try {
+                            network.ycc.waterdog.pe.PEEncryptionInitializer initializer =
+                                    new network.ycc.waterdog.pe.PEEncryptionInitializer(peHandshake.getPublicKey());
+                            unsafe().sendPacket(initializer.getRequest());
+                            ch.getHandle().flush();
+                            ch.getHandle().pipeline().addLast(initializer);
+                        } catch (java.security.InvalidKeyException e) {
+                            bungee.getLogger().log(Level.WARNING,
+                                    "Bad public key for " + InitialHandler.this + ": " + e.getMessage());
+                            startResourcePack();
+                        } catch (java.security.NoSuchAlgorithmException e) {
+                            bungee.getLogger().log(Level.SEVERE, e.getMessage(), e);
+                            disconnect(e.getMessage());
+                        }
+                    } else {
+                        startResourcePack();
+                    }
+                } else
+                // Waterdog end
                 if ( onlineMode )
                 {
                     unsafe().sendPacket( request = EncryptionUtil.encryptRequest() );
@@ -519,6 +581,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                             userCon.setCompressionThreshold( BungeeCord.getInstance().config.getCompressionThreshold() );
                             userCon.init();
 
+                            // Waterdog start
+                            if (ProtocolConstants.isPE(getVersion())) {
+                                // NOOP
+                            } else
+                            // Waterdog end
                             unsafe.sendPacket( new LoginSuccess( getUniqueId().toString(), getName() ) ); // With dashes in between
                             ch.setProtocol( Protocol.GAME );
 
@@ -589,10 +656,66 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         return ( name != null ) ? name : ( loginRequest == null ) ? null : loginRequest.getData();
     }
 
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEEncryptionResponse response) {
+        startResourcePack();
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackChunkRequest request) {
+        network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.sendPackDataChunk(
+                ch.getHandle(), request.getPackUUID(), request.getChunkIndex(), getVersion());
+    }
+
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackResponse response) {
+        switch (response.getStatus()) {
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_REFUSED: {
+                disconnect("disconnectionScreen.noReason");
+                break;
+            }
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_SEND_PACKS: {
+                for (String packString : response.getPacks()) {
+                    final UUID uuid = UUID.fromString(packString.split("_")[0]);
+                    final network.ycc.waterdog.pe.PEResourcePackData pack =
+                            network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.get(uuid);
+                    if (pack == null) {
+                        disconnect("disconnectionScreen.resourcePack");
+                        break;
+                    }
+                    network.ycc.waterdog.pe.PERawPacketData.injectResourcePackInfo(ch.getHandle(), pack);
+                }
+                break;
+            }
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_HAVE_ALL_PACKS: {
+                network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.sendResourceStack(this);
+                break;
+            }
+            case network.ycc.waterdog.pe.packet.PEResourcePackResponse.STATUS_COMPLETED: {
+                finish();
+                break;
+            }
+        }
+        ch.getHandle().flush();
+    }
+
+    //TODO: can probably get rid of this
+    public int getDefaultVersion() {
+        return ch == null ? -1 : (ch.getHandle() instanceof network.ycc.raknet.server.channel.RakNetChildChannel ? ProtocolConstants.MINECRAFT_1_8 : -1);
+    }
+
+    public void startResourcePack() {
+        unsafe.sendPacket(new LoginSuccess());
+        ch.setProtocol( Protocol.GAME );
+        network.ycc.waterdog.pe.PEResourcePackManager.INSTANCE.sendResourcePack(this);
+    }
+    // Waterdog end
+
     @Override
     public int getVersion()
     {
-        return ( handshake == null ) ? -1 : handshake.getProtocolVersion();
+        return ( handshake == null ) ? getDefaultVersion() : handshake.getProtocolVersion(); // Waterdog
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 51d0c6cf..8c6ce6e1 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -95,6 +95,11 @@ public class UpstreamBridge extends PacketHandler
         if ( con.getServer() != null )
         {
             Channel server = con.getServer().getCh().getHandle();
+            // Waterdog start
+            if (network.ycc.waterdog.pe.PEDimSwitchLock.isChannelLocked(channel.getHandle())) {
+                server.config().setAutoRead(false);
+            } else
+            // Waterdog end
             if ( channel.getHandle().isWritable() )
             {
                 server.config().setAutoRead( true );
@@ -117,6 +122,18 @@ public class UpstreamBridge extends PacketHandler
         if ( con.getServer() != null )
         {
             con.getEntityRewrite().rewriteServerbound( packet.buf, con.getClientEntityId(), con.getServerEntityId(), con.getPendingConnection().getVersion() );
+            // Waterdog start
+            if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) {
+                if (con.getEntityRewrite() instanceof net.md_5.bungee.entitymap.EntityMap_PE) {
+                    net.md_5.bungee.entitymap.EntityMap_PE entityMap = (net.md_5.bungee.entitymap.EntityMap_PE) con.getEntityRewrite();
+                    java.util.Collection<java.util.UUID> playerList = con.getPePlayerList();
+
+                    entityMap.playerListTrackRewrite(packet.buf, playerList::add, playerList::remove,
+                            con.getUniqueId(), con.getPendingConnection().getLoginId());
+                }
+                //TODO: block rewrite?
+            }
+            // Waterdog end
             con.getServer().getCh().write( packet );
         }
     }
@@ -124,6 +141,17 @@ public class UpstreamBridge extends PacketHandler
     @Override
     public void handle(KeepAlive alive) throws Exception
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) {
+            int newPing = (int) (alive.getRandomId() / 1000000);
+            con.getTabListHandler().onPingChange( newPing );
+            con.setPing( newPing );
+            if (con.getServer() != null && con.getServer().getInfo().isRakNet()) {
+                throw CancelSendSignal.INSTANCE; //only forward for TCP servers
+            }
+            return;
+        }
+        // Waterdog end
         if ( alive.getRandomId() == con.getServer().getSentPingId() )
         {
             int newPing = (int) ( System.currentTimeMillis() - con.getSentPingTime() );
@@ -135,11 +163,42 @@ public class UpstreamBridge extends PacketHandler
         }
     }
 
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PEResourcePackResponse command) throws Exception
+    {
+        throw CancelSendSignal.INSTANCE;
+    }
+    // Waterdog end
+
+    // Waterdog start
+    @Override
+    public void handle(network.ycc.waterdog.pe.packet.PECommand command) throws Exception
+    {
+        int maxLength = 256;
+        Preconditions.checkArgument( command.getMessage().length() <= maxLength, "PECommand message too long" ); // Mojang limit, check on updates
+        Preconditions.checkArgument(!StringUtil.isBlank(command.getMessage()), "PECommand message is empty");
+
+        ChatEvent chatEvent = new ChatEvent( con, con.getServer(), command.getMessage() );
+        if ( !bungee.getPluginManager().callEvent( chatEvent ).isCancelled() )
+        {
+            command.setMessage( chatEvent.getMessage() );
+            if ( !bungee.getPluginManager().dispatchCommand( con, command.getMessage().substring( 1 ) ) )
+            {
+                con.getServer().unsafe().sendPacket( command );
+            }
+        }
+        throw CancelSendSignal.INSTANCE;
+    }
+    // Waterdog end
+
     @Override
     public void handle(Chat chat) throws Exception
     {
         int maxLength = ( con.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_11 ) ? 256 : 100;
+        if (ProtocolConstants.isPE(con.getPendingConnection().getVersion())) maxLength = 1024; // Waterdog
         Preconditions.checkArgument( chat.getMessage().length() <= maxLength, "Chat message too long" ); // Mojang limit, check on updates
+        if (!ProtocolConstants.isPE(con.getPendingConnection().getVersion())) // Waterdog
         Preconditions.checkArgument(!StringUtil.isBlank(chat.getMessage()), "Chat message is empty");
 
         ChatEvent chatEvent = new ChatEvent( con, con.getServer(), chat.getMessage() );
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
index 38a4761e..5f8c2381 100644
--- a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap.java
@@ -27,6 +27,11 @@ public abstract class EntityMap
     // Returns the correct entity map for the protocol version
     public static EntityMap getEntityMap(int version)
     {
+        // Waterdog start
+        if (ProtocolConstants.isPE(version)) {
+            return EntityMap_PE.INSTANCE;
+        }
+        // Waterdog end
         switch ( version )
         {
             case ProtocolConstants.MINECRAFT_1_8:
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index 4882b8ed..3cf45753 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -54,6 +54,11 @@ public class ChannelWrapper
             if ( packet instanceof PacketWrapper )
             {
                 ( (PacketWrapper) packet ).setReleased( true );
+                // Waterdog start - let RakNet and PECompressor pool and auto flush
+                if (ch.config() instanceof network.ycc.raknet.RakNet.Config) {
+                    ch.write( ( (PacketWrapper) packet ).buf, ch.voidPromise() );
+                } else
+                // Waterdog end
                 ch.writeAndFlush( ( (PacketWrapper) packet ).buf, ch.voidPromise() );
             } else
             {
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index a66099fc..7287197c 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -154,6 +154,11 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                     {
                         handler, cause
                     } );
+                // Waterdog start
+                } else if (cause instanceof io.netty.handler.codec.CorruptedFrameException) {
+                    ProxyServer.getInstance().getLogger().log( Level.WARNING, handler + " - corrupt frame", cause );
+                    return; //log, but dont close
+                // Waterdog end
                 } else
                 {
                     ProxyServer.getInstance().getLogger().log( Level.SEVERE, handler + " - encountered exception", cause );
diff --git a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
index ac99d02c..4ef5d859 100644
--- a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
+++ b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
@@ -69,7 +69,7 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
         ByteBuf in = msg.content();
         if ( in.readUnsignedByte() != 0xFE || in.readUnsignedByte() != 0xFD )
         {
-            bungee.getLogger().log( Level.WARNING, "Query - Incorrect magic!: {0}", msg.sender() );
+            //bungee.getLogger().log( Level.WARNING, "Query - Incorrect magic!: {0}", msg.sender() ); // Waterdog
             return;
         }
 
@@ -100,12 +100,16 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
             }
 
             // Waterfall start
+            // Waterdog start - rewrite event
             List<String> players = bungee.getPlayers().stream().map(ProxiedPlayer::getName).collect(Collectors.toList());
 
-            ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(), "SMP", "Waterfall_Proxy",
+            ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(),
+                    "SMP", "Waterdog_Proxy",
                     bungee.getOnlineCount(), listener.getMaxPlayers(), listener.getHost().getPort(),
-                    listener.getHost().getHostString(), "MINECRAFT",  players, bungee.getGameVersion()));
+                    listener.getHost().getHostString(), listener.isRakNet() ? "MINECRAFTPE" : "MINECRAFT",
+                    players, bungee.getGameVersion()));
             QueryResult result = bungee.getPluginManager().callEvent(event).getResult();
+            // Waterdog end
             // Waterfall end
 
             out.writeByte( 0x00 );
@@ -169,9 +173,30 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
         ctx.writeAndFlush( response );
     }
 
+    // Waterdog start
+    @Override
+    public boolean acceptInboundMessage(Object msg) throws Exception {
+        if (!listener.isRakNet()) {
+            return super.acceptInboundMessage(msg);
+        }
+        if (listener.isRakNet() && !listener.isQueryEnabled()) {
+            return false;
+        }
+        //PE UDP channel gets some garbage sometimes, so lets filter it out here
+        if (super.acceptInboundMessage(msg)) {
+            final ByteBuf data = ((DatagramPacket) msg).content();
+            return data.readableBytes() >= 2
+                    && data.getUnsignedByte(data.readerIndex()) == 0xFE
+                    && data.getUnsignedByte(data.readerIndex() + 1) == 0xFD;
+        }
+        return false;
+    }
+    // Waterdog end
+
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
     {
+        if (!listener.isRakNet()) // Waterdog
         bungee.getLogger().log( Level.WARNING, "Error whilst handling query packet from " + ctx.channel().remoteAddress(), cause );
     }
 
-- 
2.17.2 (Apple Git-113)

