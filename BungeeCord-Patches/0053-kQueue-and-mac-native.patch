From efc99e772f5d01bd4dbcea7cd36e8897c57098de Mon Sep 17 00:00:00 2001
From: Colin Godsey <crgodsey@gmail.com>
Date: Tue, 16 Apr 2019 07:25:52 -0600
Subject: [PATCH] kQueue and mac native


diff --git a/native/compile-native.sh b/native/compile-native.sh
index 98baf0e2..430012e3 100755
--- a/native/compile-native.sh
+++ b/native/compile-native.sh
@@ -1,6 +1,8 @@
 #!/bin/sh
 
-CXX="g++ -shared -fPIC -O3 -Wall -Werror -I$JAVA_HOME/include/ -I$JAVA_HOME/include/linux/"
+# Waterdog - for mac, do: brew install mbedtls zlib
 
-$CXX src/main/c/NativeCipherImpl.cpp -o src/main/resources/native-cipher.so -lcrypto
+CXX="g++ -shared -fPIC -O3 -Wall -Werror -I$JAVA_HOME/include/ -I$JAVA_HOME/include/linux/ -I$JAVA_HOME/include/darwin/"
+
+$CXX src/main/c/NativeCipherImpl.cpp -o src/main/resources/native-cipher.so -lcrypto -lmbedcrypto
 $CXX src/main/c/NativeCompressImpl.cpp -o src/main/resources/native-compress.so -lz
diff --git a/native/src/main/c/NativeCipherImpl.cpp b/native/src/main/c/NativeCipherImpl.cpp
index aa7a12b4..6a27dc67 100644
--- a/native/src/main/c/NativeCipherImpl.cpp
+++ b/native/src/main/c/NativeCipherImpl.cpp
@@ -1,5 +1,7 @@
 // Support for CentOS 6
+#if __linux__ // Waterdog
 __asm__(".symver memcpy,memcpy@GLIBC_2.2.5");
+#endif // Waterdog
 
 #include <stdlib.h>
 #include <string.h>
diff --git a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
index 6c92c1f5..ab08b874 100644
--- a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
+++ b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
@@ -80,6 +80,6 @@ public final class NativeCode<T>
 
     public static boolean isSupported()
     {
-        return "Linux".equals( System.getProperty( "os.name" ) ) && "amd64".equals( System.getProperty( "os.arch" ) );
+        return ("Linux".equals( System.getProperty( "os.name" ) ) || "Mac OS X".equals( System.getProperty( "os.name" ) )) && ("amd64".equals( System.getProperty( "os.arch" ) ) || "x86_64".equals( System.getProperty( "os.arch" )) ); // Waterdog
     }
 }
diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java
index 7b0ecb09..1e82b290 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/NativeCipher.java
@@ -18,7 +18,7 @@ public class NativeCipher implements BungeeCipher
     @Override
     public void init(boolean forEncryption, SecretKey key) throws GeneralSecurityException
     {
-        Preconditions.checkArgument( key.getEncoded().length == 16, "Invalid key size" );
+        Preconditions.checkArgument( key.getEncoded().length == 16 || key.getEncoded().length == 32, "Invalid key size" ); // Waterdog
         free();
 
         this.ctx = nativeCipher.init( forEncryption, key.getEncoded() );
diff --git a/proxy/pom.xml b/proxy/pom.xml
index f0497f59..2ae44e8c 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -118,6 +118,16 @@
             <scope>runtime</scope>
         </dependency>
         <!-- Waterfall end -->
+
+        <!-- Waterdog start -->
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-transport-native-kqueue</artifactId>
+            <version>${netty.version}</version>
+            <classifier>osx-x86_64</classifier>
+            <scope>compile</scope>
+        </dependency>
+        <!-- Waterdog end -->
     </dependencies>
 
     <build>
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 042bccb5..289e7183 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -87,9 +87,18 @@ public class PipelineUtils
     public static final String LEGACY_KICKER = "legacy-kick";
 
     private static boolean epoll;
+    private static boolean kQueue;
 
     static
     {
+        // Waterdog start
+        try {
+            kQueue = io.netty.channel.kqueue.KQueue.isAvailable();
+        } catch (Throwable e) {}
+        if (kQueue) {
+            ProxyServer.getInstance().getLogger().info( "kQueue is working, utilising it!" );
+        } else
+        // Waterdog end
         if ( !PlatformDependent.isWindows() && Boolean.parseBoolean( System.getProperty( "bungee.epoll", "true" ) ) )
         {
             ProxyServer.getInstance().getLogger().info( "Not on Windows, attempting to use enhanced EpollEventLoop" );
@@ -106,21 +115,25 @@ public class PipelineUtils
 
     public static EventLoopGroup newEventLoopGroup(int threads, ThreadFactory factory)
     {
+        if (kQueue) return new io.netty.channel.kqueue.KQueueEventLoopGroup(threads, factory); // Waterdog
         return epoll ? new EpollEventLoopGroup( threads, factory ) : new NioEventLoopGroup( threads, factory );
     }
 
     public static Class<? extends ServerChannel> getServerChannel()
     {
+        if (kQueue) return io.netty.channel.kqueue.KQueueServerSocketChannel.class; // Waterdog
         return epoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class;
     }
 
     public static Class<? extends Channel> getChannel()
     {
+        if (kQueue) return io.netty.channel.kqueue.KQueueSocketChannel.class; // Waterdog
         return epoll ? EpollSocketChannel.class : NioSocketChannel.class;
     }
 
     public static Class<? extends io.netty.channel.socket.DatagramChannel> getDatagramChannel() // Waterfall - change to DatagramChannel
     {
+        if (kQueue) return io.netty.channel.kqueue.KQueueDatagramChannel.class; // Waterdog
         return epoll ? EpollDatagramChannel.class : NioDatagramChannel.class;
     }
 
-- 
2.17.2 (Apple Git-113)

